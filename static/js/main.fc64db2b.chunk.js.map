{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","nums","ops","ids","state","lastPressed","undefined","calc","operation","handleClick","e","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","this","currentNumber","className","id","onClick","map","num","op","React","Component"],"mappings":"iMAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,m9CCZMe,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,IAAM,CAAE,IAAK,IAAK,IAAK,KACvBC,IAAM,CACV,EAAG,QACH,EAAG,QACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,EAAG,QACH,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,OAGDL,I,isBACJM,MAAQ,CACNC,iBAAaC,EACbC,KAAM,IACNC,eAAWF,G,MAIbG,YAAc,SAACC,GACb,gBAA8B,MAAKN,MAA3BG,KAAR,YAAQA,KAAMF,YAAd,YAAcA,YACNM,UAAcD,EAAEE,OAAhBD,UAER,OAAOA,WACL,IAAK,KACH,MAAKE,SAAS,CACZN,KAAM,MAER,MAGF,IAAK,IACH,IAAMO,UAAYC,KAAKR,MACvB,MAAKM,SAAS,CACZN,KAAMO,YAER,MAGF,IAAK,IACH,IAAME,SAAWT,KAAKU,MAAM,cACtBC,KAAOF,SAASG,OAAO,GAAG,GAE5BD,KAAKE,SAAS,MAChB,MAAKP,SAAS,CACZN,KAAMA,KAAK,MAIf,MAGF,QACE,IAAIG,QAAIJ,EAER,GAAGJ,IAAIkB,SAAST,WACd,GAAGT,IAAIkB,SAASf,cAA8B,MAAdM,UAAmB,CAEjD,IAAMU,cAAgBd,KAAKU,MAAM,IAAIK,UAChCC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgBvB,KAAKmB,UAAUI,MACtDd,GAAIH,KAAKY,MAAM,EAAGZ,KAAKkB,OAASJ,eAA5B,WAAiDV,UAAjD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGHD,GAAc,MAATH,KAAgBI,UAAaJ,KAAOI,UAG3C,MAAKE,SAAS,CACZN,KAAMG,KAKZ,MAAKG,SAAS,CACZR,YAAaM,a,wLAKjB,WAAU,IAAD,OACP,EAAgCe,KAAKtB,MAAdG,GAAvB,EAAQoB,cAAR,EAAuBpB,MAEvB,OACE,mEAAKqB,UAAU,aAAf,UACE,kEAAKC,GAAG,UAAUD,UAAU,UAA5B,SACGrB,IAGH,mEAAKqB,UAAU,iBAAf,UACE,qEACEA,UAAU,kBACVE,QAASJ,KAAKjB,YACdoB,GAAG,QAHL,gBAQC5B,KAAK8B,KAAI,SAAAC,GAAG,OACX,qEACEJ,UAAS,oBAAuB,IAARI,GAAa,SAErCF,QAAS,EAAKrB,YACdoB,GAAI1B,IAAI6B,GAJV,SAMGA,GAJIA,MAQT,qEACEJ,UAAU,YACVE,QAASJ,KAAKjB,YACdoB,GAAG,UAHL,kBAQF,mEAAKD,UAAU,gBAAf,UACG1B,IAAI6B,KAAI,SAAAE,GAAE,OACT,qEACEL,UAAU,OAEVE,QAAS,EAAKrB,YACdoB,GAAI1B,IAAI8B,GAJV,SAMGA,GAJIA,MAQT,qEACEL,UAAU,OACVE,QAASJ,KAAKjB,YACdoB,GAAG,SAHL,yB,KAtHQK,6CAAMC,WAmITrC,4B","file":"static/js/main.fc64db2b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = [ '/', '*', '-', '+'];\nconst ids = {\n  7: 'seven', \n  8: 'eight', \n  9: 'nine', \n  4: 'four', \n  5: 'five', \n  6: 'six', \n  1: 'one', \n  2: 'two', \n  3: 'three', \n  0: 'zero',\n  '/': 'divide', \n  '*': 'multiply', \n  '-': 'subtract', \n  '+': 'add'\n}\n\nclass App extends React.Component {\n  state = {\n    lastPressed: undefined,\n    calc: '0',\n    operation: undefined\n  }\n  \n  \n  handleClick = (e) => {\n    const { calc, lastPressed } = this.state;\n    const { innerText } = e.target;\n    \n    switch(innerText) {\n      case 'AC': {\n        this.setState({\n          calc: '0',\n        });\n        break;\n      }\n        \n      case '=': {\n        const evaluated = eval(calc);\n        this.setState({\n          calc: evaluated\n        });\n        break;\n      }\n        \n      case '.': {\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n        \n        if(!last.includes('.')) {\n          this.setState({\n            calc: calc+'.'\n          })\n        }\n        \n        break;\n      }\n        \n      default: {\n        let e = undefined;\n        // check for other op\n        if(ops.includes(innerText)) {\n          if(ops.includes(lastPressed) && innerText !== '-') {\n            // oh boii...\n            const lastNumberIdx = calc.split('').reverse()\n                .findIndex(char => char !== ' ' && nums.includes(+char)); \n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n          } else {\n            e = `${calc} ${innerText} `;\n          }\n        } else {\n          e = (calc === '0') ? innerText : (calc + innerText);\n        }\n        \n        this.setState({\n          calc: e\n        });\n      }\n    }\n    \n    this.setState({\n      lastPressed: innerText\n    })\n    \n  }\n  \n  render() {\n    const { currentNumber, calc } = this.state;\n    \n    return (\n      <div className=\"calculator\">        \n        <div id=\"display\" className=\"display\">\n          {calc}\n        </div>\n        \n        <div className=\"nums-container\">\n          <button \n            className=\"big-h tomato ac\" \n            onClick={this.handleClick} \n            id=\"clear\"\n            >\n            AC\n          </button>\n          \n          {nums.map(num => (\n            <button \n              className={`dark-grey ${num === 0 && 'big-h'}`} \n              key={num} \n              onClick={this.handleClick}\n              id={ids[num]}\n             >\n              {num}\n            </button>\n          ))}\n          \n          <button \n            className=\"dark-grey\" \n            onClick={this.handleClick} \n            id=\"decimal\"\n           >\n            .\n          </button>\n        </div>\n        <div className=\"ops-container\">\n          {ops.map(op => (\n            <button \n              className=\"gray\" \n              key={op} \n              onClick={this.handleClick}\n              id={ids[op]}\n             >\n              {op}\n            </button>\n          ))}\n          \n          <button \n            className=\"gray\" \n            onClick={this.handleClick} \n            id=\"equals\"\n           >\n            =\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}